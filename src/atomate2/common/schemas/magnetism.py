from typing import List, Literal, Optional

from pydantic import BaseModel, Field
from pymatgen.core import Structure


class MagnetismInput(BaseModel):
    """
    Documented to be embedded inside MagnetismDocument which defines the
    calculation inputs.
    """

    structure: Structure = Field(None, description="")

    ordering: Literal["FM", "AFM", "FiM", "NM", "Unknown"] = Field(
        None,
        description="The detected magnetic ordering of the input structure, "
        "as defined in pymatgen.analysis.magnetism.analyzer.",
    )

    symmetry: str = Field(None, "Detected space group symbol.")


class MagnetismDocument(BaseModel):
    """
    Document containing information about a single magnetic ordering
    of a given material.
    """

    # This is intended to be the same as the MagneticOrderingsToDb format
    # from atomate v1. However, it omits `task_id` (preferring `uuid`),
    # `input.index`, `input.origin` and `input.input_index`
    # (since these were more useful for initial benchmarking) and
    # `wf_meta`

    formula: str = Field(
        None,
        description="Formula in same format as "
        "pymatgen.core.structure.Structure.formula.",
    )
    formula_pretty: str = Field(
        None, description="Cleaned representation of the formula",
    )

    parent_structure: Structure = Field(
        None,
        description="The parent structure from which individual magnetic "
        "orderings are generated.",
    )

    structure: Structure = Field(
        None, description="The final, relaxed structure for a given magnetic ordering."
    )

    magmoms: List[float] = Field(
        None,
        description="A list of magnetic moments from the final, relaxed structure.",
    )

    input: MagnetismInput = Field(
        None, description="Input structure for this magnetic ordering."
    )

    total_magnetization: float = Field(
        None,
        description="Total magnetization as a sum of individual atomic moments in "
        "the calculated unit cell.",
    )

    total_magnetization_per_formula_unit: float = Field(
        None, description="Total magnetization normalized to per formula unit."
    )

    total_magnetization_per_unit_volume: float = Field(
        None, description="Total magnetiation noramlized to per unit volume."
    )

    ordering: Literal["FM", "AFM", "FiM", "NM", "Unknown"] = Field(
        None,
        description="The detected magnetic ordering, "
        "as defined in pymatgen.analysis.magnetism.analyzer.",
    )

    ordering_changed: bool = Field(
        None,
        description="Specifies whether or not the magnetic ordering changed during the calculation.",
    )

    symmetry: str = Field(None, description="Detected space group symbol.")

    symmetry_changed: bool = Field(
        None,
        description="Specifies whether or not the symmetry changed during the calculation.",
    )

    energy_per_atom: float = Field(None, description="Final energy per atom.")

    stable: bool = Field(
        None,
        description="Specifies whether or not this is the calculated ground state ordering, among "
        "all other orderings generated by the workflow.",
    )

    uuid: str = Field(
        None, description="UUID of the calculation for this magnetic ordering."
    )

    decomposes_to: Optional[str] = Field(
        None,
        description="UUID of stable magnetic ordering for this material, if not stable.",
    )

    energy_above_ground_state_per_atom: float = Field(
        None, description="Energy per atom above the calculated ground state ordering."
    )

    energy_diff_relax_static: Optional[float] = Field(
        None,
        description="Difference in energy between relaxation and final static calculation, if "
        "relaxation performed (useful for benchmarking).",
    )
