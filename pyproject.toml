[build-system]
requires = ["setuptools >= 42", "versioningit ~= 1.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "atomate2"
description = "atomate2 is a library of materials science workflows"
readme = "README.md"
keywords = ["automated", "dft", "high-throughput", "vasp", "workflow"]
license = { text = "modified BSD" }
authors = [{ name = "Alex Ganose", email = "alexganose@gmail.com" }]
dynamic = ["version"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.9",
    "Topic :: Other/Nonlisted Topic",
    "Topic :: Scientific/Engineering",
]
requires-python = ">=3.9"
dependencies = [
    "PyYAML",
    "click",
    "custodian>=2023.3.10",
    "emmet-core>=0.70.5",
    "jobflow>=0.1.11",
    "monty>=2023.9.25",
    "numpy",
    "pydantic-settings>=2.0.3",
    "pydantic>=2.0.1",
    "pymatgen>=2023.10.11",
]

[project.optional-dependencies]
amset = ["amset>=0.4.15", "pydash"]
cclib = ["cclib"]
mp = ["mp-api>=0.37.5"]
phonons = ["phonopy>=1.10.8", "seekpath"]
lobster = ["lobsterpy>=0.3.2"]
defects = ["dscribe>=1.2.0", "pymatgen-analysis-defects>=2022.11.30"]
forcefields = ["chgnet>=0.2.2", "matgl>=0.8.3", "quippy-ase>=0.9.14"]
docs = [
    "FireWorks==2.0.3",
    "autodoc_pydantic==2.0.1",
    "furo==2023.9.10",
    "ipython==8.16.1",
    "jsonschema[format]",
    "myst_parser==2.0.0",
    "numpydoc==1.6.0",
    "sphinx-copybutton==0.5.2",
    "sphinx==7.2.6",
    "sphinx_design==0.5.0",
]
dev = ["pre-commit>=2.12.1"]
tests = ["FireWorks==2.0.3", "pytest-cov==4.1.0", "pytest==7.4.3"]
strict = [
    "PyYAML==6.0.1",
    "cclib==1.8",
    "chgnet==0.3.1",
    "click==8.1.7",
    "custodian==2023.10.9",
    "dscribe==2.1.0",
    "emmet-core==0.71.2",
    "jobflow==0.1.14",
    "lobsterpy==0.3.2",
    "matgl==0.8.3",
    "monty==2023.9.25",
    "mp-api==0.37.5",
    "numpy",
    "phonopy==2.20.0",
    "pydantic-settings==2.0.3",
    "pydantic==2.4.2",
    "pymatgen-analysis-defects==2023.10.19",
    "pymatgen==2023.10.11",
    "quippy-ase==0.9.14",
    "seekpath==2.1.0",
    "typing-extensions==4.8.0",
]

[project.scripts]
atm = "atomate2.cli:cli"

[project.urls]
homepage = "https://materialsproject.github.io/atomate2/"
repository = "https://github.com/materialsproject/atomate2"
documentation = "https://materialsproject.github.io/atomate2/"
changelog = "https://github.com/materialsproject/atomate2/blob/main/CHANGELOG.md"

[tool.setuptools.package-data]
atomate2 = ["py.typed"]
"atomate2.vasp.sets" = ["*.yaml"]
"atomate2.cp2k.sets" = ["*.yaml"]
"atomate2.cp2k.schemas.calc_types" = ["*.yaml"]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"

[tool.flake8]
max-line-length = 88
max-doc-length = 88
select = "C, E, F, W, B"
extend-ignore = "E203, W503, E501, F401, RST21"
min-python-version = "3.8.0"
docstring-convention = "numpy"
rst-roles = "class, func, ref, obj"

[tool.mypy]
ignore_missing_imports = true
no_strict_optional = true

[tool.pytest.ini_options]
addopts = "-p no:warnings --import-mode=importlib"
filterwarnings = [
    "ignore:.*POTCAR.*:UserWarning",
    "ignore:.*input structure.*:UserWarning",
    "ignore:.*is not gzipped.*:UserWarning",
    "ignore:.*magmom.*:UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
include = ["src/*"]
parallel = true
branch = true

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
skip_covered = true
show_missing = true
exclude_lines = [
    '^\s*@overload( |$)',
    '^\s*assert False(,|$)',
    'if typing.TYPE_CHECKING:',
]

[tool.ruff]
target-version = "py39"
select = [
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "D",      # pydocstyle
    "E",      # pycodestyle error
    "EXE",    # flake8-executable
    "F",      # pyflakes
    "FA",     # flake8-future-annotations
    "FBT003", # boolean-positional-value-in-call
    "FLY",    # flynt
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "ISC",    # flake8-implicit-str-concat
    "PD",     # pandas-vet
    "PERF",   # perflint
    "PIE",    # flake8-pie
    "PL",     # pylint
    "PT",     # flake8-pytest-style
    "PYI",    # flakes8-pyi
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "RUF",    # Ruff-specific rules
    "SIM",    # flake8-simplify
    "SLOT",   # flake8-slots
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "W",      # pycodestyle warning
    "YTT",    # flake8-2020
]
ignore = [
    "PD011",   # pandas-use-of-dot-values
    "PERF203", # try-except-in-loop
    "PLR",     # pylint-refactor
    "PT004",   # pytest-missing-fixture-name-underscore
    "PT006",   # pytest-parametrize-names-wrong-type
    "RUF013",  # implicit-optional
    # TODO remove PT011, pytest.raises() should always check err msg
    "PT011", # pytest-raises-too-broad
    "PT013", # pytest-incorrect-pytest-import
]
pydocstyle.convention = "numpy"
isort.known-first-party = ["atomate2"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"**/tests/*" = ["D"]
# flake8-type-checking (TCH): things inside TYPE_CHECKING aren't available
#     at runtime and so can't be used by pydantic models
# flake8-future-annotations (FA): pipe operator for type unions only work in pydantic models in python 3.10+
"**/schemas/*" = ["FA", "TCH", "UP007"]
"**/schemas.py" = ["FA", "TCH", "UP007"]
"**/settings.py" = ["FA", "TCH", "UP007"]
