[build-system]
requires = ["setuptools >= 42", "versioningit ~= 1.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "atomate2"
description = "atomate2 is a library of materials science workflows"
readme = "README.md"
keywords = ["automated", "dft", "high-throughput", "vasp", "workflow"]
license = { text = "modified BSD" }
authors = [{ name = "Alex Ganose", email = "alexganose@gmail.com" }]
dynamic = ["version"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.9",
    "Topic :: Other/Nonlisted Topic",
    "Topic :: Scientific/Engineering",
]
requires-python = ">=3.9"
dependencies = [
    "PyYAML",
    "click",
    "custodian>=2024.4.18",
    "emmet-core==0.82.2",
    "jobflow>=0.1.11",
    "monty>=2024.2.2",
    "numpy",
    "pydantic-settings>=2.0.3",
    "pydantic>=2.0.1",
    "pymatgen>=2024.4.13",
]

[project.optional-dependencies]
abinit = ["abipy>=0.9.3"]
amset = ["amset>=0.4.15", "pydash"]
cclib = ["cclib"]
mp = ["mp-api>=0.37.5"]
phonons = ["phonopy>=1.10.8", "seekpath"]
lobster = ["ijson>=3.2.2", "lobsterpy>=0.4.0"]
defects = [
    "dscribe>=1.2.0",
    "pymatgen-analysis-defects>=2024.5.11",
    "python-ulid",
]
forcefields = [
    "ase>=3.22.1",
    "chgnet>=0.2.2",
    "mace-torch>=0.3.3",
    "matgl>=1.1.1",
    "quippy-ase>=0.9.14",
    "torch<=2.2.1",       # incompatibility with dgl if newer versions are used
]
docs = [
    "FireWorks==2.0.3",
    "autodoc_pydantic==2.1.0",
    "furo==2024.5.6",
    "ipython==8.25.0",
    "jsonschema[format]",
    "myst_parser==2.0.0",
    "numpydoc==1.7.0",
    "sphinx-copybutton==0.5.2",
    "sphinx==7.2.6",
    "sphinx_design==0.6.0",
]
dev = ["pre-commit>=2.12.1"]
tests = [
    "FireWorks==2.0.3",
    "pytest-cov==5.0.0",
    "pytest-mock==3.14.0",
    "pytest==8.0.2",
]
strict = [
    "PyYAML==6.0.1",
    # must use >= for ase to not uninstall main branch install in CI
    # last known working commit: https://gitlab.com/ase/ase@2bab58f4e
    "ase>=3.22.1",
    "cclib==1.8.1",
    "chgnet==0.3.8",
    "click==8.1.7",
    "custodian==2024.4.18",
    "dscribe==2.1.1",
    "emmet-core==0.82.2",
    "ijson==3.3.0",
    "jobflow==0.1.17",
    "lobsterpy==0.4.4",
    "mace-torch>=0.3.3",
    "matgl==1.1.2",
    "monty==2024.5.24",
    "mp-api==0.41.2",
    "numpy",
    "phonopy==2.24.3",
    "pydantic-settings==2.3.3",
    "pydantic==2.7.4",
    "pymatgen-analysis-defects==2024.5.11",
    "pymatgen==2024.6.10",
    "python-ulid==2.7.0",
    "quippy-ase==0.9.14",
    "seekpath==2.1.0",
    "torch==2.2.1",
    "typing-extensions==4.12.2",
]

[project.scripts]
atm = "atomate2.cli:cli"

[project.urls]
homepage = "https://materialsproject.github.io/atomate2/"
repository = "https://github.com/materialsproject/atomate2"
documentation = "https://materialsproject.github.io/atomate2/"
changelog = "https://github.com/materialsproject/atomate2/blob/main/CHANGELOG.md"

[tool.setuptools.package-data]
atomate2 = ["py.typed"]
"atomate2.vasp.sets" = ["*.yaml"]
"atomate2.cp2k.sets" = ["*.yaml"]
"atomate2.cp2k.schemas.calc_types" = ["*.yaml"]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"

[tool.mypy]
ignore_missing_imports = true
no_strict_optional = true

[tool.pytest.ini_options]
addopts = "-p no:warnings --import-mode=importlib --cov-config=pyproject.toml"
filterwarnings = [
    "ignore:.*POTCAR.*:UserWarning",
    "ignore:.*input structure.*:UserWarning",
    "ignore:.*is not gzipped.*:UserWarning",
    "ignore:.*magmom.*:UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
include = ["src/*"]
parallel = true
branch = true

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
skip_covered = true
show_missing = true
exclude_lines = [
    '^\s*@overload( |$)',
    '^\s*assert False(,|$)',
    'if typing.TYPE_CHECKING:',
]

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN002",
    "ANN003",
    "ANN101", # missing self type annotation
    "ANN102", # missing cls annotation
    "ANN401",
    "ARG002", # unused method argument
    # "BLE001",
    "C408",    # Unnecessary (dict/list/tuple) call - remove call
    "C901",    # function too complex
    "COM812",  # trailing comma missing
    "EM",      # exception message must not use f-string literal
    "ERA001",  # found commented out code
    "FBT001",
    "FBT002",
    "FIX002",
    "G004",    # logging uses fstring
    "ISC001",
    "PD011",   # pandas-use-of-dot-values
    "PERF203", # try-except-in-loop
    "PLR0911", # too many returns
    "PLR0912", # too many branches
    "PLR0913", # too many arguments
    "PLR0915", # too many local statements
    "PLR2004",
    "PT004",   # pytest-missing-fixture-name-underscore
    "PT006",   # pytest-parametrize-names-wrong-type
    "PT013",   # pytest-incorrect-pytest-import
    "PTH",     # prefer Pathlib to os.path
    "RUF013",  # implicit-optional
    "S324",    # use of insecure hash function
    "S507",    # paramiko auto trust
    "TD",      # TODOs
    "TRY003",  # long message outside exception class
]
pydocstyle.convention = "numpy"
isort.known-first-party = ["atomate2"]
isort.split-on-trailing-comma = false

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"**/tests/*" = ["ANN", "ARG001", "D", "INP001", "PLR2004", "S101"]
# flake8-type-checking (TCH): things inside TYPE_CHECKING aren't available
#     at runtime and so can't be used by pydantic models
# flake8-future-annotations (FA): pipe operator for type unions only work in pydantic models in python 3.10+
"**/schemas/*" = ["FA", "TCH", "UP007"]
"**/schemas.py" = ["FA", "TCH", "UP007"]
"**/settings.py" = ["FA", "TCH", "UP007"]
"docs/*" = ["INP001"]
